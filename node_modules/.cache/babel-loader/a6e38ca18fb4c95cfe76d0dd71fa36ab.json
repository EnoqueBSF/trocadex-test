{"ast":null,"code":"'use strict'; //Modules\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\enoqu\\\\Desktop\\\\Analise Trocadex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\enoqu\\\\Desktop\\\\Analise Trocadex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar https = require('https');\n\nvar querystring = require('querystring'); //Helpers\n\n\nvar Utils = require('./helpers/utilities');\n\nvar Constants = require('./helpers/constants');\n\nvar ReturnObject = require('./helpers/ReturnObject');\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.8\n * @license MIT\n * @kind class\n */\n\n\nvar CoinGecko =\n/*#__PURE__*/\nfunction () {\n  function CoinGecko() {\n    _classCallCheck(this, CoinGecko);\n  }\n\n  _createClass(CoinGecko, [{\n    key: \"ping\",\n\n    /**\n     * @description Check API server status\n     * @function ping\n     * @returns {ReturnObject}\n     */\n    value: function ping() {\n      var path = \"/ping\"; //Build options\n\n      var options = this._buildRequestOptions(path); //Return request\n\n\n      return this._request(options);\n    }\n  }, {\n    key: \"global\",\n\n    /**\n     * @description Get cryptocurrency global data\n     * @function global\n     * @returns {ReturnObject}\n     */\n    value: function global() {\n      var path = \"/global\"; //Build options\n\n      var options = this._buildRequestOptions(path); //Return request\n\n\n      return this._request(options);\n    }\n  }, {\n    key: \"_buildRequestOptions\",\n\n    /**\n     * @description Build options for https.request\n     * @function _buildRequestOptions\n     * @protected\n     * @param {string} path - Relative path for API\n     * @param {object} params - Object representing query strings for url parameters\n     * @returns {Object} - {path, method, host, port} Options for request\n     */\n    value: function _buildRequestOptions(path, params) {\n      //Stringify object params if exist\n      if (Utils.isObject(params)) params = querystring.stringify(params);else params = undefined; //Make relative path\n      //Check if has params, append accordingly\n\n      if (params == undefined) path = \"/api/v\".concat(Constants.API_VERSION).concat(path);else path = \"/api/v\".concat(Constants.API_VERSION).concat(path, \"?\").concat(params); //Return options\n\n      return {\n        path: path,\n        method: 'GET',\n        host: Constants.HOST,\n        port: 443\n      };\n    }\n  }, {\n    key: \"_request\",\n\n    /**\n     * @description Perform https request\n     * @function _request\n     * @protected\n     * @param {object} options - https.request options (from _buildRequestOptions())\n     * @returns {Promise} Body of https request data results\n     */\n    value: function _request(options) {\n      return new Promise(function (resolve, reject) {\n        //Perform request\n        var req = https.request(options, function (res) {\n          var body = []; //Set body on data\n\n          res.on('data', function (chunk) {\n            body.push(chunk);\n          }); //On end, end the Promise\n\n          res.on('end', function () {\n            try {\n              body = Buffer.concat(body);\n              body = body.toString(); //Check if page is returned instead of JSON\n\n              if (body.startsWith('<!DOCTYPE html>')) Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.'); //Attempt to parse\n\n              body = JSON.parse(body);\n            } catch (error) {\n              reject(error);\n            }\n\n            ; //Create return object\n\n            resolve(ReturnObject(!(res.statusCode < 200 || res.statusCode >= 300), res.statusMessage, res.statusCode, body));\n          });\n        }); //On error, reject the Promise\n\n        req.on('error', function (error) {\n          return reject(error);\n        }); //End request\n\n        req.end();\n      });\n    }\n  }, {\n    key: \"coins\",\n\n    /**\n     * @description Calls related to coins\n     */\n    get: function get() {\n      var _this = this;\n\n      var pathPrefix = 'coins';\n      return {\n        /**\n         * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n         * @function coins.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n         * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Use this to obtain all the coins’ id in order to make API calls\n         * @function coins.list()\n         * @returns {ReturnObject}\n         */\n        list: function list() {\n          var path = \"/\".concat(pathPrefix, \"/list\"); //Build options\n\n          var options = _this._buildRequestOptions(path); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Use this to obtain all the coins market data (price, market cap, volume)\n         * @function coins.markets()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n         * @param {array|string} params.ids - List of coin id to filter if you want specific results\n         * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n         * @returns {ReturnObject}\n         */\n        markets: function markets() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix, \"/markets\"); //Must be object\n\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          } //Check the params.ids\n          //If is string, ok. If is array, convert to string\n\n\n          if (Utils.isArray(params['ids'])) {\n            params.ids = params.ids.join(',');\n          } //Build options\n\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n         * @function coins.fetch()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {boolean} params.tickers [default: true] - Include ticker data\n         * @param {boolean} params.market_data [default: true] - Include market data\n         * @param {boolean} params.community_data [default: true] - Include community data\n         * @param {boolean} params.developer_data [default: true] - Include developer data\n         * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n         * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n         * @returns {ReturnObject}\n         */\n        fetch: function fetch(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId); //Build request options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get coin tickers (paginated to 100 items).\n         * @function coins.fetchTickers()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.page - Page through results\n         * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n         * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n         * @returns {ReturnObject}\n         */\n        fetchTickers: function fetchTickers(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Convert array to string\n\n          if (Utils.isArray(params['exchange_ids'])) {\n            params.exchange_ids = params.exchange_ids.join(',');\n          }\n\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/tickers\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get historical data (name, price, market, stats) at a given date for a coin\n         * @function coins.fetchHistory()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n         * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n         * @returns {ReturnObject}\n         */\n        fetchHistory: function fetchHistory(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Must be object\n\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.date, set to default today/now\n\n          if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/history\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n         * @function coins.fetchMarketChart()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n         * @returns {ReturnObject}\n         */\n        fetchMarketChart: function fetchMarketChart(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Must be object\n\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          } //If no params.days, set to default: 1\n\n\n          if (params['days'] == undefined) {\n            params.days = 1;\n          }\n\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/market_chart\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n         *   Minutely data will be used for duration within 1 day.\n         *   Hourly data will be used for duration between 1 day and 90 days.\n         *   Daily data will be used for duration above 90 days.\n         * @function coins.fetchMarketChartRange()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n         * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n         * @returns {ReturnObject}\n         */\n        fetchMarketChartRange: function fetchMarketChartRange(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Must be object\n\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          }\n\n          if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n          if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/market_chart/range\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get status updates for a given coin\n         * @function coins.fetchStatusUpdates()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @returns {ReturnObject}\n         */\n        fetchStatusUpdates: function fetchStatusUpdates(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/status_updates\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get coin info from contract address\n         * @function coins.fetchCoinContractInfo()\n         * @param {object} contractAddress - (Required) Token’s contract address\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @returns {ReturnObject}\n         */\n        fetchCoinContractInfo: function fetchCoinContractInfo(contractAddress) {\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          //Must have contractAddress, assetPlatform\n          if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(assetPlatform, \"/contract/\").concat(contractAddress); //Build options\n\n          var options = _this._buildRequestOptions(path); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n         * @function coins.fetchCoinContractMarketChart()\n         * @param {object} contractAddress - (Required) Token’s contract address\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n         * @returns {ReturnObject}\n         */\n        fetchCoinContractMarketChart: function fetchCoinContractMarketChart(contractAddress) {\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          //Must have contractAddress, assetPlatform\n          if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.'); //Must be object\n\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          } //If no params.days, set to default: 1\n\n\n          if (params['days'] == undefined) {\n            params.days = 1;\n          }\n\n          var path = \"/\".concat(pathPrefix, \"/\").concat(assetPlatform, \"/contract/\").concat(contractAddress, \"/market_chart\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        },\n\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n         * @function coins.fetchCoinContractMarketChartRange()\n         * @param {object} contractAddress - (Required) Token’s contract address\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n         * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n         * @returns {ReturnObject}\n         */\n        fetchCoinContractMarketChartRange: function fetchCoinContractMarketChartRange(contractAddress) {\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          //Must have contractAddress, assetPlatform\n          if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.'); //Must be object\n\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          } //If no params.days, set to default: 1\n\n\n          if (params['days'] == undefined) {\n            params.days = 1;\n          }\n\n          var path = \"/\".concat(pathPrefix, \"/\").concat(assetPlatform, \"/contract/\").concat(contractAddress, \"/market_chart/range\"); //Build options\n\n          var options = _this._buildRequestOptions(path, params); //Return request\n\n\n          return _this._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"exchanges\",\n\n    /**\n     * @description Calls related to exchanges\n     */\n    get: function get() {\n      var _this2 = this;\n\n      var pathPrefix = 'exchanges';\n      return {\n        /**\n         * @description List all exchanges\n         * @function exchanges.all()\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var path = \"/\".concat(pathPrefix); //Build options\n\n          var options = _this2._buildRequestOptions(path); //Return request\n\n\n          return _this2._request(options);\n        },\n\n        /**\n         * @description List all supported markets id and name\n         * @function exchanges.list()\n         * @returns {ReturnObject}\n         */\n        list: function list() {\n          var path = \"/\".concat(pathPrefix, \"/list\"); //Build options\n\n          var options = _this2._buildRequestOptions(path); //Return request\n\n\n          return _this2._request(options);\n        },\n\n        /**\n         * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n         * @function exchanges.fetch()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @returns {ReturnObject}\n         */\n        fetch: function fetch(exchangeId) {\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId); //Build options\n\n          var options = _this2._buildRequestOptions(path); //Return request\n\n\n          return _this2._request(options);\n        },\n\n        /**\n         * @description Get tickers for a given exchange\n         * @function exchanges.fetchTickers()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.page - Page through results\n         * @param {number} params.coin_ids - Filter tickers by coin_ids\n         * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n         * @returns {ReturnObject}\n         */\n        fetchTickers: function fetchTickers(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.'); //Convert array to string\n\n          if (Utils.isArray(params['coin_ids'])) {\n            params.coin_ids = params.coin_ids.join(',');\n          }\n\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId, \"/tickers\"); //Build options\n\n          var options = _this2._buildRequestOptions(path, params); //Return request\n\n\n          return _this2._request(options);\n        },\n\n        /**\n         * @description Get status updates for a given exchange\n         * @function exchanges.fetchStatusUpdates()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @returns {ReturnObject}\n         */\n        fetchStatusUpdates: function fetchStatusUpdates(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId, \"/status_updates\"); //Build options\n\n          var options = _this2._buildRequestOptions(path, params); //Return request\n\n\n          return _this2._request(options);\n        },\n\n        /**\n         * @description Get volume chart data for a given exchange, returned in BTC\n         * @function exchanges.fetchVolumeChart()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n         * @returns {ReturnObject}\n         */\n        fetchVolumeChart: function fetchVolumeChart(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId, \"/volume_chart\"); //Build options\n\n          var options = _this2._buildRequestOptions(path, params); //Return request\n\n\n          return _this2._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"statusUpdates\",\n\n    /**\n     * @description Calls related to status updates\n     */\n    get: function get() {\n      var _this3 = this;\n\n      return {\n        /**\n         * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n         * @function statusUpdates.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n         * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/status_updates\"; //Build options\n\n          var options = _this3._buildRequestOptions(path, params); //Return request\n\n\n          return _this3._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"events\",\n\n    /**\n     * @description Calls related to events\n     */\n    get: function get() {\n      var _this4 = this;\n\n      var pathPrefix = 'events';\n      return {\n        /**\n         * @description Get events, paginated by 100\n         * @function events.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n         * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n         * @param {number} params.page - Page of results (paginated by 100)\n         * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n         * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n         * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix); //Build options\n\n          var options = _this4._buildRequestOptions(path, params); //Return request\n\n\n          return _this4._request(options);\n        },\n\n        /**\n         * @description Get list of event countries\n         * @function events.fetchCountries()\n         * @returns {ReturnObject}\n         */\n        fetchCountries: function fetchCountries() {\n          var path = \"/\".concat(pathPrefix, \"/countries\"); //Build options\n\n          var options = _this4._buildRequestOptions(path); //Return request\n\n\n          return _this4._request(options);\n        },\n\n        /**\n         * @description Get list of event types\n         * @function events.fetchTypes()\n         * @returns {ReturnObject}\n         */\n        fetchTypes: function fetchTypes() {\n          var path = \"/\".concat(pathPrefix, \"/types\"); //Build options\n\n          var options = _this4._buildRequestOptions(path); //Return request\n\n\n          return _this4._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"exchangeRates\",\n\n    /**\n     * @description Calls related to exchange rates\n     */\n    get: function get() {\n      var _this5 = this;\n\n      return {\n        /**\n         * @description Get BTC-to-Currency exchange rates\n         * @function exchangeRates.all()\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var path = \"/exchange_rates\"; //Build options\n\n          var options = _this5._buildRequestOptions(path); //Return request\n\n\n          return _this5._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"simple\",\n\n    /**\n     * @description Calls related to \"simple\" endpoints\n     */\n    get: function get() {\n      var _this6 = this;\n\n      return {\n        /**\n         * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n         * @function simple.price()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n         * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n         * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n         * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n         * @returns {ReturnObject}\n         */\n        price: function price() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //Check the params.vs_currencies\n          //If is string, ok. If is array, convert to string\n\n          if (Utils.isArray(params['vs_currencies'])) {\n            params.vs_currencies = params.vs_currencies.join(',');\n          } //If no params.vs_currency, set to default: 'usd'\n\n\n          if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n            params.vs_currencies = 'usd';\n          } //Check the params.ids\n          //If is string, ok. If is array, convert to string\n\n\n          if (Utils.isArray(params['ids'])) {\n            params.ids = params.ids.join(',');\n          } //Must have params.ids\n\n\n          if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.'); //\n\n          var path = \"/simple/price\"; //Build options\n\n          var options = _this6._buildRequestOptions(path, params); //Return request\n\n\n          return _this6._request(options);\n        },\n\n        /**\n         * @description Get list of supported vs/comparisons currencies\n         * @function simple.supportedVsCurrencies()\n         * @returns {ReturnObject}\n         */\n        supportedVsCurrencies: function supportedVsCurrencies() {\n          var path = \"/simple/supported_vs_currencies\"; //Build options\n\n          var options = _this6._buildRequestOptions(path); //Return request\n\n\n          return _this6._request(options);\n        },\n\n        /**\n         * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n         * @function simple.fetchTokenPrice()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n         * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n         * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n         * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n         * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n         * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n         * @returns {ReturnObject}\n         */\n        fetchTokenPrice: function fetchTokenPrice() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //Must have assetPlatform\n\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.'); //Must have contract_addresses, vs_currencies\n\n          if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n          if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object'); //If are arrays, convert to string\n\n          if (Utils.isArray(params['contract_addresses'])) {\n            params.contract_addresses = params.contract_addresses.join(',');\n          }\n\n          if (Utils.isArray(params['vs_currencies'])) {\n            params.vs_currencies = params.vs_currencies.join(',');\n          }\n\n          var path = \"/simple/token_price/\".concat(assetPlatform); //Build options\n\n          var options = _this6._buildRequestOptions(path, params); //Return request\n\n\n          return _this6._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"finance\",\n\n    /**\n     * @description Calls related to finance endpoints\n     */\n    get: function get() {\n      var _this7 = this;\n\n      return {\n        /**\n         * @description List all finance platforms\n         * @function finance.fetchPlatforms()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page of results (paginated to 100 by default)\n         * @returns {ReturnObject}\n         */\n        fetchPlatforms: function fetchPlatforms() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/finance_platforms\"; //Build options\n\n          var options = _this7._buildRequestOptions(path, params); //Return request\n\n\n          return _this7._request(options);\n        },\n\n        /**\n         * @description List all finance products\n         * @function finance.fetchProducts()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page of results (paginated to 100 by default)\n         * @param {string} params.start_at - Start date of the financial products\n         * @param {string} params.end_at - End date of the financial products\n         * @returns {ReturnObject}\n         */\n        fetchProducts: function fetchProducts() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/finance_products\"; //Build options\n\n          var options = _this7._buildRequestOptions(path, params); //Return request\n\n\n          return _this7._request(options);\n        }\n      };\n    }\n  }, {\n    key: \"derivatives\",\n\n    /**\n     * @description Calls related to derivative endpoints\n     */\n    get: function get() {\n      var _this8 = this;\n\n      return {\n        /**\n         * @description List all derivative tickers\n         * @function derivatives.fetchTickers()\n         * @returns {ReturnObject}\n         */\n        fetchTickers: function fetchTickers() {\n          var path = \"/derivatives\"; //Build options\n\n          var options = _this8._buildRequestOptions(path); //Return request\n\n\n          return _this8._request(options);\n        }\n      };\n    }\n  }]);\n\n  return CoinGecko;\n}();\n\n; //Set Constants\n\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE; //\n\nmodule.exports = exports = CoinGecko;","map":null,"metadata":{},"sourceType":"script"}